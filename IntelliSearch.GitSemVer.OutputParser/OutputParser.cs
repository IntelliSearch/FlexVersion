//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Output.g4 by ANTLR 4.7.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.1")]
[System.CLSCompliant(false)]
public partial class OutputParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, FUNC=4, VAR=5, TEXT=6, NL=7, WS=8;
	public const int
		RULE_start = 0, RULE_expr = 1, RULE_variable = 2, RULE_function = 3, RULE_commaexpr = 4, 
		RULE_text = 5;
	public static readonly string[] ruleNames = {
		"start", "expr", "variable", "function", "commaexpr", "text"
	};

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'", "','"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, "FUNC", "VAR", "TEXT", "NL", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Output.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static OutputParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public OutputParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public OutputParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class StartContext : ParserRuleContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public StartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_start; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOutputListener typedListener = listener as IOutputListener;
			if (typedListener != null) typedListener.EnterStart(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOutputListener typedListener = listener as IOutputListener;
			if (typedListener != null) typedListener.ExitStart(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOutputVisitor<TResult> typedVisitor = visitor as IOutputVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StartContext start() {
		StartContext _localctx = new StartContext(Context, State);
		EnterRule(_localctx, 0, RULE_start);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 15;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << FUNC) | (1L << VAR) | (1L << TEXT))) != 0)) {
				{
				{
				State = 12; expr(0);
				}
				}
				State = 17;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public FunctionContext function() {
			return GetRuleContext<FunctionContext>(0);
		}
		public TextContext text() {
			return GetRuleContext<TextContext>(0);
		}
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOutputListener typedListener = listener as IOutputListener;
			if (typedListener != null) typedListener.EnterExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOutputListener typedListener = listener as IOutputListener;
			if (typedListener != null) typedListener.ExitExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOutputVisitor<TResult> typedVisitor = visitor as IOutputVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 2;
		EnterRecursionRule(_localctx, 2, RULE_expr, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 22;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case VAR:
				{
				State = 19; variable();
				}
				break;
			case FUNC:
				{
				State = 20; function();
				}
				break;
			case TEXT:
				{
				State = 21; text();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 28;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ExprContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_expr);
					State = 24;
					if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
					State = 25; expr(5);
					}
					} 
				}
				State = 30;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class VariableContext : ParserRuleContext {
		public ITerminalNode VAR() { return GetToken(OutputParser.VAR, 0); }
		public VariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOutputListener typedListener = listener as IOutputListener;
			if (typedListener != null) typedListener.EnterVariable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOutputListener typedListener = listener as IOutputListener;
			if (typedListener != null) typedListener.ExitVariable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOutputVisitor<TResult> typedVisitor = visitor as IOutputVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableContext variable() {
		VariableContext _localctx = new VariableContext(Context, State);
		EnterRule(_localctx, 4, RULE_variable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 31; Match(VAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionContext : ParserRuleContext {
		public ITerminalNode FUNC() { return GetToken(OutputParser.FUNC, 0); }
		public CommaexprContext commaexpr() {
			return GetRuleContext<CommaexprContext>(0);
		}
		public FunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOutputListener typedListener = listener as IOutputListener;
			if (typedListener != null) typedListener.EnterFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOutputListener typedListener = listener as IOutputListener;
			if (typedListener != null) typedListener.ExitFunction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOutputVisitor<TResult> typedVisitor = visitor as IOutputVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionContext function() {
		FunctionContext _localctx = new FunctionContext(Context, State);
		EnterRule(_localctx, 6, RULE_function);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 33; Match(FUNC);
			State = 34; Match(T__0);
			State = 35; commaexpr(0);
			State = 36; Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommaexprContext : ParserRuleContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode[] WS() { return GetTokens(OutputParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(OutputParser.WS, i);
		}
		public CommaexprContext[] commaexpr() {
			return GetRuleContexts<CommaexprContext>();
		}
		public CommaexprContext commaexpr(int i) {
			return GetRuleContext<CommaexprContext>(i);
		}
		public CommaexprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commaexpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOutputListener typedListener = listener as IOutputListener;
			if (typedListener != null) typedListener.EnterCommaexpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOutputListener typedListener = listener as IOutputListener;
			if (typedListener != null) typedListener.ExitCommaexpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOutputVisitor<TResult> typedVisitor = visitor as IOutputVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommaexpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommaexprContext commaexpr() {
		return commaexpr(0);
	}

	private CommaexprContext commaexpr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		CommaexprContext _localctx = new CommaexprContext(Context, _parentState);
		CommaexprContext _prevctx = _localctx;
		int _startState = 8;
		EnterRecursionRule(_localctx, 8, RULE_commaexpr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 40;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 39; Match(WS);
				}
			}

			State = 42; expr(0);
			State = 44;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				{
				State = 43; Match(WS);
				}
				break;
			}
			}
			Context.Stop = TokenStream.LT(-1);
			State = 51;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new CommaexprContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_commaexpr);
					State = 46;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 47; Match(T__2);
					State = 48; commaexpr(2);
					}
					} 
				}
				State = 53;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class TextContext : ParserRuleContext {
		public ITerminalNode[] TEXT() { return GetTokens(OutputParser.TEXT); }
		public ITerminalNode TEXT(int i) {
			return GetToken(OutputParser.TEXT, i);
		}
		public TextContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_text; } }
		public override void EnterRule(IParseTreeListener listener) {
			IOutputListener typedListener = listener as IOutputListener;
			if (typedListener != null) typedListener.EnterText(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IOutputListener typedListener = listener as IOutputListener;
			if (typedListener != null) typedListener.ExitText(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOutputVisitor<TResult> typedVisitor = visitor as IOutputVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitText(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TextContext text() {
		TextContext _localctx = new TextContext(Context, State);
		EnterRule(_localctx, 10, RULE_text);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 55;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 54; Match(TEXT);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 57;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 1: return expr_sempred((ExprContext)_localctx, predIndex);
		case 4: return commaexpr_sempred((CommaexprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 4);
		}
		return true;
	}
	private bool commaexpr_sempred(CommaexprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 1);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\n', '>', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', '\t', 
		'\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', '\x6', 
		'\t', '\x6', '\x4', '\a', '\t', '\a', '\x3', '\x2', '\a', '\x2', '\x10', 
		'\n', '\x2', '\f', '\x2', '\xE', '\x2', '\x13', '\v', '\x2', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', '\x19', '\n', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\a', '\x3', '\x1D', '\n', '\x3', '\f', 
		'\x3', '\xE', '\x3', ' ', '\v', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x6', '\x3', '\x6', '\x5', '\x6', '+', '\n', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x5', '\x6', '/', '\n', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\a', '\x6', '\x34', '\n', '\x6', '\f', '\x6', '\xE', '\x6', '\x37', 
		'\v', '\x6', '\x3', '\a', '\x6', '\a', ':', '\n', '\a', '\r', '\a', '\xE', 
		'\a', ';', '\x3', '\a', '\x2', '\x4', '\x4', '\n', '\b', '\x2', '\x4', 
		'\x6', '\b', '\n', '\f', '\x2', '\x2', '\x2', '?', '\x2', '\x11', '\x3', 
		'\x2', '\x2', '\x2', '\x4', '\x18', '\x3', '\x2', '\x2', '\x2', '\x6', 
		'!', '\x3', '\x2', '\x2', '\x2', '\b', '#', '\x3', '\x2', '\x2', '\x2', 
		'\n', '(', '\x3', '\x2', '\x2', '\x2', '\f', '\x39', '\x3', '\x2', '\x2', 
		'\x2', '\xE', '\x10', '\x5', '\x4', '\x3', '\x2', '\xF', '\xE', '\x3', 
		'\x2', '\x2', '\x2', '\x10', '\x13', '\x3', '\x2', '\x2', '\x2', '\x11', 
		'\xF', '\x3', '\x2', '\x2', '\x2', '\x11', '\x12', '\x3', '\x2', '\x2', 
		'\x2', '\x12', '\x3', '\x3', '\x2', '\x2', '\x2', '\x13', '\x11', '\x3', 
		'\x2', '\x2', '\x2', '\x14', '\x15', '\b', '\x3', '\x1', '\x2', '\x15', 
		'\x19', '\x5', '\x6', '\x4', '\x2', '\x16', '\x19', '\x5', '\b', '\x5', 
		'\x2', '\x17', '\x19', '\x5', '\f', '\a', '\x2', '\x18', '\x14', '\x3', 
		'\x2', '\x2', '\x2', '\x18', '\x16', '\x3', '\x2', '\x2', '\x2', '\x18', 
		'\x17', '\x3', '\x2', '\x2', '\x2', '\x19', '\x1E', '\x3', '\x2', '\x2', 
		'\x2', '\x1A', '\x1B', '\f', '\x6', '\x2', '\x2', '\x1B', '\x1D', '\x5', 
		'\x4', '\x3', '\a', '\x1C', '\x1A', '\x3', '\x2', '\x2', '\x2', '\x1D', 
		' ', '\x3', '\x2', '\x2', '\x2', '\x1E', '\x1C', '\x3', '\x2', '\x2', 
		'\x2', '\x1E', '\x1F', '\x3', '\x2', '\x2', '\x2', '\x1F', '\x5', '\x3', 
		'\x2', '\x2', '\x2', ' ', '\x1E', '\x3', '\x2', '\x2', '\x2', '!', '\"', 
		'\a', '\a', '\x2', '\x2', '\"', '\a', '\x3', '\x2', '\x2', '\x2', '#', 
		'$', '\a', '\x6', '\x2', '\x2', '$', '%', '\a', '\x3', '\x2', '\x2', '%', 
		'&', '\x5', '\n', '\x6', '\x2', '&', '\'', '\a', '\x4', '\x2', '\x2', 
		'\'', '\t', '\x3', '\x2', '\x2', '\x2', '(', '*', '\b', '\x6', '\x1', 
		'\x2', ')', '+', '\a', '\n', '\x2', '\x2', '*', ')', '\x3', '\x2', '\x2', 
		'\x2', '*', '+', '\x3', '\x2', '\x2', '\x2', '+', ',', '\x3', '\x2', '\x2', 
		'\x2', ',', '.', '\x5', '\x4', '\x3', '\x2', '-', '/', '\a', '\n', '\x2', 
		'\x2', '.', '-', '\x3', '\x2', '\x2', '\x2', '.', '/', '\x3', '\x2', '\x2', 
		'\x2', '/', '\x35', '\x3', '\x2', '\x2', '\x2', '\x30', '\x31', '\f', 
		'\x3', '\x2', '\x2', '\x31', '\x32', '\a', '\x5', '\x2', '\x2', '\x32', 
		'\x34', '\x5', '\n', '\x6', '\x4', '\x33', '\x30', '\x3', '\x2', '\x2', 
		'\x2', '\x34', '\x37', '\x3', '\x2', '\x2', '\x2', '\x35', '\x33', '\x3', 
		'\x2', '\x2', '\x2', '\x35', '\x36', '\x3', '\x2', '\x2', '\x2', '\x36', 
		'\v', '\x3', '\x2', '\x2', '\x2', '\x37', '\x35', '\x3', '\x2', '\x2', 
		'\x2', '\x38', ':', '\a', '\b', '\x2', '\x2', '\x39', '\x38', '\x3', '\x2', 
		'\x2', '\x2', ':', ';', '\x3', '\x2', '\x2', '\x2', ';', '\x39', '\x3', 
		'\x2', '\x2', '\x2', ';', '<', '\x3', '\x2', '\x2', '\x2', '<', '\r', 
		'\x3', '\x2', '\x2', '\x2', '\t', '\x11', '\x18', '\x1E', '*', '.', '\x35', 
		';',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
